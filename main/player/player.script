local screen_dims = {}
function init(self)
	msg.post(".", "acquire_input_focus")
	local screencenter = vmath.vector3(tonumber(sys.get_config("display.width", "0")) * 0.5, tonumber(sys.get_config("display.height", "0")) * 0.5, 0)
	screen_dims.x=tonumber(sys.get_config("display.width", "0"))
	screen_dims.y=tonumber(sys.get_config("display.height", "0"))
	print(screencenter)
	go.set_position(screencenter)
	-- preset values
	self.speed = 300
	self.firerate = 0.1
	self.fire_delay = 0
	self.move ={}
	self.move.dir = vmath.vector3()
	self.move.prio = vmath.vector3()
	self.mpos = vmath.vector3()

	particlefx.play("#trace")
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	--firerate update
	self.fire_delay=self.fire_delay+dt 
	-- steering code
	local pos = go.get_position()
	if vmath.length(self.move.dir)>0 then
		local npos = vmath.vector3()
		--normalize to ensure constant speed
		if vmath.length(self.move.dir)>1 then
			self.move.dir=vmath.normalize(self.move.dir)
		end
		--change to represent location change
		npos = pos + self.move.dir*self.speed*dt
		--if it's out of bounds, set it back in bounds
		if npos.x>screen_dims.x-16 then
			npos.x=screen_dims.x-16
		end
		if npos.x<16 then
			npos.x=16
		end
		if npos.y>screen_dims.y-16 then
			npos.y=screen_dims.y-16
		end
		if npos.y<16 then
			npos.y=16
		end
		--and set it
		go.set_position(npos)
		-- rotational code - runs 
		go.set_rotation(vmath.quat_rotation_z(math.atan2(self.move.dir.y, self.move.dir.x)-math.pi/2))
		--reset movement
		self.move.dir = vmath.vector3()
	end
	if vmath.length(self.mpos)>0 then
		-- create a directional vector
		local aim_dir = self.mpos - go.get_position()
		--rotate in an approporiate direction
		go.set_rotation(vmath.quat_rotation_z(math.atan2(aim_dir.y, aim_dir.x)-math.pi/2))
		--shoot if possible
		if self.fire_delay>self.firerate then
			factory.create("#factory",nil,vmath.quat_rotation_z(math.atan2(aim_dir.y, aim_dir.x)-math.pi/2),{damage=10})
			sound.play('#gun',{gain=0.1,speed=rnd.double(0.9,1.1)})
			self.fire_delay=0
		end
		particlefx.play("#shoot")
		--reset aim
		self.mpos = vmath.vector3()
	end
end

function fixed_update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
end

function on_input(self, action_id, action)
	-- TODO: non blocking movement+aim, ie holding left and pressing right should activate right
	--movement buttons
	if action_id == hash("move_right") then
		--on press assign priority to that direction
		if action.pressed then
			self.move.prio.x=1
			self.move.dir.x=1
		--when released we no longer need the priority, while the button opposite may need it (and it can't detect it) - give priority to it instead
		elseif action.released then
			self.move.prio.x=-1
		elseif self.move.prio.x==1 then
			self.move.dir.x=1
		end
	elseif action_id == hash("move_left") then
		-- there is probably better way than copy pasting (functions) but it would take a bunch of more space + time
		if action.pressed then
			self.move.prio.x=-1
			self.move.dir.x=-1
		elseif action.released then
			self.move.prio.x=1
		elseif self.move.prio.x==-1 then
			self.move.dir.x=-1
		end
	elseif action_id == hash("move_up") then
		if action.pressed then
			self.move.prio.y=1
			self.move.dir.y=1
		elseif action.released then
			self.move.prio.y=-1
		elseif self.move.prio.y==1 then
			self.move.dir.y=1
		end
	elseif action_id == hash("move_down") then
		if action.pressed then
			self.move.prio.y=-1
			self.move.dir.y=-1
		elseif action.released then
			self.move.prio.y=1
		elseif self.move.prio.y==-1 then
			self.move.dir.y=-1
		end
	--aim buttons
	-- kinda hate it, but took me like 1 minute to do it lmao, and when we get to adding more functionality we'll have better vision anyways
	elseif action_id == hash("fire") then
		self.mpos = vmath.vector3(action.x, action.y, 0)
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
